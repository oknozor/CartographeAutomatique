using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace CartographeAutomatique;

[Generator]
public class CartographeGenerator : IIncrementalGenerator
{
    private const string Namespace = "Generators";
    private const string AttributeName = "MapToAttribute";

    private const string AttributeSourceCode = $@"// <auto-generated/>

namespace {Namespace}
{{
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    public class MapToAttribute : System.Attribute
    {{
        public MapToAttribute(System.Type targetClassName, bool Exhaustive = true)
        {{
            TargetClassName = targetClassName;
            Exhaustive = Exhaustive;
        }}

        public System.Type TargetClassName {{ get; }}
        public bool Exhaustive {{ get; set; }}
    }}
}}";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            "MapToAttribute.g.cs",
            SourceText.From(AttributeSourceCode, Encoding.UTF8)));

        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                (s, _) => s is ClassDeclarationSyntax,
                (ctx, _) => GetClassDeclarationForSourceGen(ctx))
            .Where(mappings => mappings.Count > 0);

        var incrementalValueProvider = provider.Collect();

        context.RegisterSourceOutput(context.CompilationProvider.Combine(incrementalValueProvider),
            (ctx, t) => GenerateCode(ctx, t.Left, t.Right));
    }

    private static List<ClassMapping> GetClassDeclarationForSourceGen(GeneratorSyntaxContext context)
    {
        var sourceClassDeclarationSyntax = (ClassDeclarationSyntax)context.Node;
        var classMappings = new List<ClassMapping>();
        foreach (var attributeListSyntax in sourceClassDeclarationSyntax.AttributeLists)
            foreach (var arguments in
                     from attributeSyntax in attributeListSyntax.Attributes
                     where attributeSyntax.Name.ToString() != $"{Namespace}.{AttributeName}"
                     select attributeSyntax.ArgumentList?.Arguments)
            {
                var targetTypeArgument = arguments?.FirstOrDefault();
                var exhaustiveArgument = arguments?
                    .SingleOrDefault(arg => arg.NameEquals?.Name.ToString() == "Exhaustive")?
                    .Expression as LiteralExpressionSyntax;
                var exhaustive = exhaustiveArgument?.Kind() == SyntaxKind.TrueLiteralExpression;

                if (targetTypeArgument?.Expression is not TypeOfExpressionSyntax typeOfExpressionSyntax) continue;

                var targetIdentifierName = typeOfExpressionSyntax.Type as IdentifierNameSyntax;
                var targetSymbolInfo = ModelExtensions.GetSymbolInfo(context.SemanticModel, targetIdentifierName!);
                var targetClassSyntax = ClassDeclarationSyntaxFromSymbolInfo(targetSymbolInfo);

                if (targetClassSyntax is null) continue;

                classMappings.Add(new ClassMapping(sourceClassDeclarationSyntax, targetClassSyntax, exhaustive));
            }

        return classMappings;
    }

    private static ClassDeclarationSyntax? ClassDeclarationSyntaxFromSymbolInfo(SymbolInfo targetSymbolInfo)
    {
        if (targetSymbolInfo.Symbol is not INamedTypeSymbol
            {
                DeclaringSyntaxReferences.Length: > 0
            } targetNamedType) return null;

        var node = targetNamedType.DeclaringSyntaxReferences[0].GetSyntax();
        if (node is ClassDeclarationSyntax classDeclarationSyntax)
        {
            return classDeclarationSyntax;
        }

        return null;
    }

    private void GenerateCode(SourceProductionContext context, Compilation compilation,
        ImmutableArray<List<ClassMapping>> classDeclarations)
    {
        var classMappings = classDeclarations.SelectMany(t => t)
            .ToList();

        foreach (var classMapping in classMappings)
        {
            var generatedMapping = classMapping.GenerateMapping(compilation);
            context.AddSource($"{classMapping.SourceClassName}To{classMapping.TargetClassName}.g.cs",
                SourceText.From(generatedMapping, Encoding.UTF8));
        }
    }
}