using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace CartographeAutomatique;

public enum MappingStrategyInternal
{
    Constructor,
    Setter
}

internal class TypeMapping(
    MappingKind mappingKind,
    TypeDeclarationSyntax sourceType,
    TypeDeclarationSyntax targetType,
    bool exhaustive,
    MappingStrategyInternal strategy,
    GeneratorAttributeSyntaxContext context)
{
    public string GenerateMapping()
    {
        var activeStrategy = TargetIsRecord() switch
        {
            true => MappingStrategyInternal.Constructor,
            _ => strategy
        };

        var assignations = GenerateAllAssignation(activeStrategy);
        var sourceNameSpace = SourceNameSpace()!;
        var targetNameSpace = TargetNameSpace()!;

        var joinedAssignation = activeStrategy switch
        {
            MappingStrategyInternal.Setter => string.Join(",\n\t\t\t", assignations),
            MappingStrategyInternal.Constructor => string.Join(",", assignations),
            _ => throw new ArgumentOutOfRangeException()
        };

        var instantiation = activeStrategy switch
        {
            MappingStrategyInternal.Setter => $"\tnew()\n\t\t{{\n\t\t\t{joinedAssignation}\n\t\t}};",
            MappingStrategyInternal.Constructor => $"\tnew({joinedAssignation});",
            _ => throw new ArgumentOutOfRangeException()
        };

        return $$"""
                 // <auto-generated/>
                 namespace {{sourceNameSpace}};

                 public static partial class {{SourceClassName}}MappingExtensions
                 {
                     public static {{targetNameSpace}}.{{TargetClassName}} MapTo{{TargetClassName}}(this {{SourceClassName}} source) =>
                        {{instantiation}}
                 }
                 """;
    }

    public string SourceClassName => SourceType().Identifier.Text;
    public string TargetClassName => TargetType().Identifier.Text;


    private List<string> GenerateAllAssignation(MappingStrategyInternal activeStrategy) =>
        (GetSourceProperties() ?? Array.Empty<PropertyOrParameter>())
        .Select(prop => GenerateAssignation(activeStrategy, prop))
        .Where(prop => prop != null)
        .Select(prop => prop!)
        .ToList();

    private string? GenerateAssignation(MappingStrategyInternal activeStrategy, PropertyOrParameter sourceProp)
    {
        var targetFieldName = GetTargetFieldName(sourceProp);
        var targetProp = GetMatchingTargetProp(targetFieldName, activeStrategy);

        if (targetProp is null)
        {
            if (exhaustive is false)
                return null;

            throw new Exception("invalid mapping");
        }

        var targetTypeSymbol = context.SemanticModel.GetTypeInfo(targetProp.Type!).Type;
        var sourceTypeSymbol = context.SemanticModel.GetTypeInfo(sourceProp.Type!).Type;

        if (targetTypeSymbol is null || sourceTypeSymbol is null)
        {
            return null;
        }

        var lhs = activeStrategy switch
        {
            MappingStrategyInternal.Constructor => $"{targetProp.Identifier}: ",
            MappingStrategyInternal.Setter => $"{targetProp.Identifier} = ",
            _ => throw new ArgumentOutOfRangeException(nameof(activeStrategy), activeStrategy, null)
        };

        var methodName = GetCustomMethodMapping(sourceProp);
        var sourceMemberAccess = $"source.{sourceProp.Identifier}";
        var conversion = sourceTypeSymbol.ImplicitConversionTo(targetTypeSymbol, sourceMemberAccess);

        return $"{lhs}{methodName ?? conversion}";
    }

    private string GetTargetFieldName(PropertyOrParameter sourceProp)
    {
        var targetField = sourceProp.TargetField();
        var targetFieldName = sourceProp.Identifier;
        if (targetField == null) return targetFieldName;

        var constantValue = context.SemanticModel.GetConstantValue(targetField.Expression);
        if (constantValue is { HasValue: true, Value: string targetMappingFieldName })
        {
            targetFieldName = targetMappingFieldName;
        }

        return targetFieldName;
    }

    private string? GetCustomMethodMapping(PropertyOrParameter sourceProp)
    {
        var customMethod = sourceProp.WithMethod();
        if (customMethod == null) return null;
        var constantValue = context.SemanticModel.GetConstantValue(customMethod.Expression);
        return constantValue is { HasValue: true, Value: string methodNameValue }
            ? $"{methodNameValue}(source.{sourceProp.Identifier})"
            : null;
    }

    private PropertyOrParameter? GetMatchingTargetProp(string targetFieldName, MappingStrategyInternal activeStrategy)
    {
        if (targetType is not ClassDeclarationSyntax targetClass ||
            activeStrategy != MappingStrategyInternal.Constructor)
            return targetType switch
            {
                ClassDeclarationSyntax classDeclaration => classDeclaration.Members
                    .OfType<PropertyDeclarationSyntax>()
                    .Select(targetParameter =>
                        new PropertyOrParameter(targetParameter.Type, targetParameter.Identifier.Text))
                    .SingleOrDefault(targetProperty => targetProperty.Identifier == targetFieldName),

                RecordDeclarationSyntax recordDeclaration => recordDeclaration.ParameterList?
                    .Parameters
                    .Select(targetParameter =>
                        new PropertyOrParameter(targetParameter.Type, targetParameter.Identifier.Text))
                    .SingleOrDefault(targetParameter => targetParameter.Identifier == targetFieldName),
                _ => throw new ArgumentOutOfRangeException()
            };
        {
            var constructor = targetClass.Members
                .OfType<ConstructorDeclarationSyntax>()
                .OrderByDescending(c => c.ParameterList.Parameters.Count) // Sort by parameter count
                .FirstOrDefault();

            return constructor?.ParameterList.Parameters
                .Select(targetParameter =>
                    new PropertyOrParameter(targetParameter.Type, targetParameter.Identifier.Text))
                .SingleOrDefault(targetParameter => targetParameter.Identifier == targetFieldName);
        }
    }

    private IEnumerable<PropertyOrParameter>? GetSourceProperties() =>
        SourceType() switch
        {
            ClassDeclarationSyntax sourceClass => sourceClass.Members
                .OfType<PropertyDeclarationSyntax>()
                .Select(member =>
                    (Member: member, Attribute: member.GetMatchingMappingAttribute(TargetClassName)))
                .Select(type =>
                    new PropertyOrParameter(type.Member.Type, type.Member.Identifier.Text, type.Attribute)),

            RecordDeclarationSyntax sourceRecord => sourceRecord
                .ParameterList?
                .Parameters
                .ToList()
                .Select(parameter => (Parameter: parameter,
                    Attribute: parameter.GetMatchingMappingAttribute(TargetClassName)))
                .Select(type =>
                    new PropertyOrParameter(type.Parameter.Type, type.Parameter.Identifier.Text, type.Attribute)),
            _ => throw new ArgumentOutOfRangeException(nameof(SourceType), SourceType(), null)
        };

    private string? TargetNameSpace()
    {
        return context.SemanticModel.GetDeclaredSymbol(targetType) is not INamedTypeSymbol sourceClassSymbol
            ? null
            : sourceClassSymbol.ContainingNamespace.ToDisplayString();
    }

    private string? SourceNameSpace()
    {
        return context.SemanticModel.GetDeclaredSymbol(SourceType()) is not INamedTypeSymbol sourceClassSymbol
            ? null
            : sourceClassSymbol.ContainingNamespace.ToDisplayString();
    }

    private bool TargetIsRecord() => targetType is RecordDeclarationSyntax;

    private TypeDeclarationSyntax SourceType() => mappingKind switch
    {
        MappingKind.MapTo => sourceType,
        MappingKind.MapFrom => targetType,
        _ => throw new ArgumentOutOfRangeException(nameof(mappingKind), mappingKind, null)
    };

    private TypeDeclarationSyntax TargetType() => mappingKind switch
    {
        MappingKind.MapTo => targetType,
        MappingKind.MapFrom => sourceType,
        _ => throw new ArgumentOutOfRangeException(nameof(mappingKind), mappingKind, null)
    };
}