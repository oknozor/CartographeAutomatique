using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace CartographeAutomatique.Tests;

public class CartographeGeneratorTests
{
    private const string Vector3ClassText =         //language=csharp
        @"namespace TestNamespace;

[Generators.MapTo(typeof(Point)]
public partial class Vector3
{
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Point
{
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
};
";

    private const string MultipleMappingAttributes =         //language=csharp
        @"namespace TestNamespace;

[MapTo(typeof(Point))]
[MapTo(typeof(Point2), Exhaustive = false)]
public class Vector3
{
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public class Point
{
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public class Point2
{
    public float X { get; set; }
    public float Y { get; set; }
}
";

    private const string ExpectedGeneratedCodeVector3 =
        //language=csharp
        @"// <auto-generated/>
namespace TestNamespace;

public static partial class Vector3MappingExtensions
{
    public static TestNamespace.Point MapToPoint(this Vector3 source) =>
       new()
       {
            X = source.X,
			Y = source.Y,
			Z = source.Z
       };
}";
    
    private const string NonExhaustiveMapping =
        //language=csharp
        @"namespace TestNamespace;

[Generators.MapTo(typeof(Point2), Exhaustive = false]
public class Vector3
{
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public class Point2
{
    public float X { get; set; }
    public float Y { get; set; }
};
";

    private const string ExpectedGeneratedCodeNonExhaustive =
        //language=csharp
        @"// <auto-generated/>
namespace TestNamespace;

public static partial class Vector3MappingExtensions
{
    public static TestNamespace.Point2 MapToPoint2(this Vector3 source) =>
       new()
       {
            X = source.X,
			Y = source.Y
       };
}";

    [Theory]
    [InlineData(Vector3ClassText, ExpectedGeneratedCodeVector3, "Vector3ToPoint")]
    [InlineData(NonExhaustiveMapping, ExpectedGeneratedCodeNonExhaustive, "Vector3ToPoint2")]
    public void GenerateMappingCode(string source, string expected, string generatedTreeName)
    {
        // Create an instance of the source generator.
        var generator = new CartographeGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(CartographeGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(source) },
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith($"{generatedTreeName}.g.cs"));

        // Complex generators should be tested using text comparison.
        var actual = generatedFileSyntax.GetText().ToString();

        Assert.Equal(expected, actual, ignoreLineEndingDifferences: true);
    }

    [Fact]
    public void GenerateMappingCodeMulty()
    {
        // Create an instance of the source generator.
        var generator = new CartographeGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(CartographeGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(MultipleMappingAttributes) },
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var toPointFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("Vector3ToPoint.g.cs"))
            .GetText()
            .ToString();

        var toPoint2FileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("Vector3ToPoint2.g.cs"))
            .GetText()
            .ToString();

        Assert.Equal(ExpectedGeneratedCodeVector3, toPointFileSyntax, ignoreLineEndingDifferences: true);
        Assert.Equal(ExpectedGeneratedCodeNonExhaustive, toPoint2FileSyntax, ignoreLineEndingDifferences: true);
    }

}