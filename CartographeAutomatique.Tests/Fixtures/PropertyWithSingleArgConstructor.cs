namespace CartographeAutomatique.Tests;

public class PropertyWithSingleArgConstructor: IFixture
{
    private const string Source =
        //language=csharp
        """
        namespace TestNamespace;

        [CartographeAutomatique.MapTo(typeof(TestNamespace.B)]
        public class A
        {
        
            public string C { get; set; }
        }
        
        public class B
        {
        
            public C C { get; set; }
        }
        
        public class C
        {
        
            public string Inner { get; set; }
            
            public C (string inner) {
                this.Inner = inner;
            }
        }
        """;

    private const string Expected =
        //language=csharp
        """
        // <auto-generated/>
        namespace TestNamespace;

        public static partial class AMappingExtensions
        {
            public static TestNamespace.B MapToB(this TestNamespace.A source) =>
               	new()
        		{
        			C = new C(source.C)
        		};
        }
        """;

    public SourceGenerationAssertion GetAssertion() =>
        new(Source, [new SourceGenerationOutput("TestNamespace_AToTestNamespace_B", Expected)]);

}