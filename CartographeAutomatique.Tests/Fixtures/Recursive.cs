namespace CartographeAutomatique.Tests;

public class Recursive : IFixture
{
    private const string Source =
        //language=csharp
        @"namespace TestNamespace;

[MapTo(typeof(Point2), Exhaustive = false)]
public class Point3
{
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public class Point2
{
    public float X { get; set; }
    public float Y { get; set; }
}

[MapTo(typeof(Line2), Exhaustive = false)]
public class Line3
{
    public Point3 A { get; set; }
    public Point3 B { get; set; }
}

public class Line2
{
    public Point2 A { get; set; }
    public Point2 B { get; set; }
}
";

    private const string ExpectedLine3ToLine2 =
        //language=csharp
        """
        // <auto-generated/>
        namespace TestNamespace;

        public static partial class Line3MappingExtensions
        {
            public static TestNamespace.Line2 MapToLine2(this Line3 source) =>
               	new()
        		{
        			A = source.A.MapToPoint2(),
        			B = source.B.MapToPoint2()
        		};
        }
        """;

    private const string ExpectedPoint3ToPoint2 =
        //language=csharp
        """
        // <auto-generated/>
        namespace TestNamespace;

        public static partial class Point3MappingExtensions
        {
            public static TestNamespace.Point2 MapToPoint2(this Point3 source) =>
               	new()
        		{
        			X = source.X,
        			Y = source.Y
        		};
        }
        """;

    public string Expected { get; init; }

    public SourceGenerationAssertion GetAssertion() =>
        new(Source, [
            new("Line3ToLine2", ExpectedLine3ToLine2),
            new("Point3ToPoint2", ExpectedPoint3ToPoint2)
        ]);
}