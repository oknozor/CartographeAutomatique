namespace CartographeAutomatique.Tests;

public class EnumImplicitConversions : IFixture
{
    private const string Source =
        //language=csharp
        """
        namespace TestNamespace;

        [CartographeAutomatique.MapTo(typeof(EnumColors))]
        [CartographeAutomatique.MapFrom(typeof(EnumColors))]
        public class PrimitiveColors
        {
            public string StrColor { get; set; }
            public short ShortColor { get; set; }
            public int IntColor { get; set; }
            public long LongColor { get; set; }
        }
        
        public class EnumColors
        {
            public Color StrColor { get; set; }
            public Color ShortColor { get; set; }
            public Color IntColor { get; set; }
            public Color LongColor { get; set; }
        }
        
        public enum Color
        {
            Red = 1,
            Black = 2,
            Green = 3
        }
        """;

    private const string ExpectedPrimitiveColorMapper =
        //language=csharp
        """
        // <auto-generated/>
        namespace TestNamespace;

        public static partial class EnumColorsMappingExtensions
        {
            public static TestNamespace.PrimitiveColors MapToPrimitiveColors(this TestNamespace.EnumColors source) =>
               	new()
        		{
        			StrColor = source.StrColor.ToString(),
        			ShortColor = (short)source.ShortColor,
        			IntColor = (int)source.IntColor,
        			LongColor = (long)source.LongColor
        		};
        }
        """;

    private const string ExpectedEnumColorMapper =
        //language=csharp
        """
        // <auto-generated/>
        namespace TestNamespace;

        public static partial class PrimitiveColorsMappingExtensions
        {
            public static TestNamespace.EnumColors MapToEnumColors(this TestNamespace.PrimitiveColors source) =>
               	new()
        		{
        			StrColor = Enum.Parse<TestNamespace.Color>(source.StrColor),
        			ShortColor = (TestNamespace.Color)source.ShortColor,
        			IntColor = (TestNamespace.Color)source.IntColor,
        			LongColor = (TestNamespace.Color)source.LongColor
        		};
        }
        """;

    public SourceGenerationAssertion GetAssertion() =>
        new(Source, [
            new SourceGenerationOutput("TestNamespace_PrimitiveColorsToTestNamespace_EnumColors", ExpectedEnumColorMapper),
            new SourceGenerationOutput("TestNamespace_EnumColorsToTestNamespace_PrimitiveColors", ExpectedPrimitiveColorMapper)
        ]);

}