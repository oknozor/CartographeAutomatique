namespace CartographeAutomatique.Tests;

public class NonExhaustive : IFixture
{
    public string Source { get; init; } =
        //language=csharp
        """
        namespace TestNamespace;

        [Generators.MapTo(typeof(Point2), Exhaustive = false]
        public class Vector3
        {
            public float X { get; set; }
            public float Y { get; set; }
            public float Z { get; set; }
        }

        public class Point2
        {
            public float X { get; set; }
            public float Y { get; set; }
        };
        """;

    public string Expected { get; init; } =
        //language=csharp
        """
        // <auto-generated/>
        namespace TestNamespace;

        public static partial class Vector3MappingExtensions
        {
            public static TestNamespace.Point2 MapToPoint2(this Vector3 source) =>
               	new()
        		{
        			X = source.X,
        			Y = source.Y
        		};
        }
        """;

    public SourceGenerationAssertion GetAssertion() =>
        new(Source, [
            new SourceGenerationOutput("Vector3ToPoint2", Expected),
        ]);
}