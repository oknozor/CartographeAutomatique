namespace CartographeAutomatique.Tests;

public class MutlipleMapping : IFixture
{
    private const string Source =
        //language=csharp
        """
        namespace TestNamespace;

        [MapTo(typeof(Point))]
        [MapTo(typeof(Point2), Exhaustive = false)]
        public class Vector3
        {
            public float X { get; set; }
            public float Y { get; set; }
            public float Z { get; set; }
        }

        public class Point
        {
            public float X { get; set; }
            public float Y { get; set; }
            public float Z { get; set; }
        }

        public class Point2
        {
            public float X { get; set; }
            public float Y { get; set; }
        }
        """;

    private const string ExpectedVectorToPoint =
        //language=csharp
        """
        // <auto-generated/>
        namespace TestNamespace;

        public static partial class Vector3MappingExtensions
        {
            public static TestNamespace.Point MapToPoint(this Vector3 source) =>
               	new()
        		{
        			X = source.X,
        			Y = source.Y,
        			Z = source.Z
        		};
        }
        """;

    public string ExpectedVectorToOPoint2 { get; init; } =
        //language=csharp
        """
        // <auto-generated/>
        namespace TestNamespace;

        public static partial class Vector3MappingExtensions
        {
            public static TestNamespace.Point2 MapToPoint2(this Vector3 source) =>
               	new()
        		{
        			X = source.X,
        			Y = source.Y
        		};
        }
        """;

    public SourceGenerationAssertion GetAssertion() =>
        new(Source, [
            new("Vector3ToPoint", ExpectedVectorToPoint),
            new("Vector3ToPoint2", ExpectedVectorToOPoint2)
        ]);
}